{"version":3,"sources":["components/Header.js","components/Note.js","components/AddNote.js","components/NotesList.js","components/Search.js","App.js","index.js"],"names":["Header","handleToggleDarkMode","className","onClick","prevDarkMode","Note","id","text","date","handleDeleteNote","size","AddNote","handleAddNote","useState","noteText","setNoteText","rows","cols","placeholder","value","onChange","e","target","length","trim","NotesList","notes","map","note","Search","handleSearchNote","type","App","setNotes","searchText","setSearchText","darkMode","setDarkMode","useEffect","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","filter","toLowerCase","includes","Date","newNote","nanoid","toLocaleDateString","newNotes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c77cc030.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst Header = ({handleToggleDarkMode}) => {\r\n    return (    \r\n    <div className=\"header\">\r\n        <h1 > Your Notes </h1>\r\n        <button onClick={()=> handleToggleDarkMode((prevDarkMode) => !prevDarkMode) } className=\"toggle\">Toggle Mode</button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Header","import {MdDeleteForever} from 'react-icons/md'\r\n\r\nconst Note = ({ id, text, date, handleDeleteNote})=>{\r\n    return (\r\n        <div className=\"note\">\r\n            <span>{text}</span>\r\n            <div className=\"note-footer\">\r\n                <small>{date}</small>\r\n                <MdDeleteForever onClick ={()=> handleDeleteNote(id)} className='delete-icon' size='1.3em'/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note","import { useState } from \"react\"\r\nconst AddNote = ({ handleAddNote }) => {\r\n    const [noteText, setNoteText]  = useState('')\r\n    const characterLimit=200;\r\n    const handleChange = (e) => { if (characterLimit - e.target.value.length >=0){setNoteText(e.target.value)}}\r\n    const handleSaveClick = ()=> { if (noteText.trim().length>0){handleAddNote(noteText) \r\n        setNoteText('')}}\r\n\r\n    return(\r\n        <div className=\"note new\">\r\n            <textarea rows=\"8\" cols=\"10\" placeholder=\"type to add a new note\" value={noteText} onChange={handleChange}></textarea>\r\n            <div className=\"note-footer\">\r\n                <small>{characterLimit-noteText.length} characters remaining </small>\r\n                <button className=\"savebutton\" onClick={handleSaveClick}>Save</button>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default AddNote","import Note from \"./Note\";\r\nimport AddNote from \"./AddNote\";\r\n\r\nconst NotesList = ({ notes, handleAddNote, handleDeleteNote }) =>{\r\n    return (\r\n        <div className=\"notes-list\">\r\n            {notes.map((note)=> (\r\n            <Note id={note.id} text={note.text} date={note.date} handleDeleteNote={handleDeleteNote} />\r\n            ))}\r\n            <AddNote handleAddNote={handleAddNote}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesList","import React from 'react' \r\nimport { MdSearch } from 'react-icons/md'\r\n\r\nconst Search = ({handleSearchNote })=> {\r\n    return <div className=\"search\">\r\n        <MdSearch className=\"search-icons\" size=\"1.3em\"/>\r\n        <input onChange={(e)=>handleSearchNote(e.target.value)} type=\"text\" placeholder=\"Type to search\"></input>\r\n    </div>\r\n}\r\n\r\nexport default Search","import { nanoid } from 'nanoid';\nimport {useEffect, useState} from 'react';\nimport Header from './components/Header';\nimport NoteList from \"./components/NotesList\";\nimport Search from './components/Search';\n\nconst App = () =>{\n  const [notes, setNotes] = useState([\n]);\n\nconst [searchText, setSearchText] = useState('')\n\nconst [darkMode, setDarkMode] = useState(false)\n\nuseEffect(()=> {\n  const savedNotes = JSON.parse(localStorage.getItem('react-notes-app-data')\n  )\n\n  if (savedNotes){\n    setNotes(savedNotes)\n  }\n\n},[])\n\nuseEffect (() => {\n  localStorage.setItem('react-notes-app-data', JSON.stringify(notes))\n}, [notes])\n\nconst addNote = (text) =>{\n  const date = new Date();\n  const newNote = {\n    id: nanoid(),\n    text: text,\n    date: date.toLocaleDateString()\n  }\n\n  const newNotes = [...notes, newNote]\n  setNotes(newNotes)\n}\n\nconst deleteNote = (id) => {\n  const newNotes = notes.filter((note)=> note.id !==id)\n  setNotes(newNotes)\n}\n\n  return( \n    <div className={`${darkMode && 'dark-mode'}`}>\n      <div className=\"container\">\n        <Header handleToggleDarkMode={setDarkMode} />\n        <Search handleSearchNote = {setSearchText}/>\n        <NoteList notes={notes.filter((note)=> note.text.toLowerCase().includes(searchText))} handleAddNote={addNote} handleDeleteNote={deleteNote}/>\n    </div>\n    </div>\n  )\n}\n \nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}